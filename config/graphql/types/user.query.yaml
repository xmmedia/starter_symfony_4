UserQuery:
    decorator: true
    heirs: [ Query ]
    config:
        fields:
            Users:
                type:        '[User!]!'
                description: 'Retrieve all Users or a subset based on the passed filters.'
                access:      '@=hasRole("ROLE_ADMIN")'
                resolve:     '@=query("App\\GraphQl\\Query\\User\\UsersQuery", args["filters"])'
                args:
                    filters: UserFilterInput

            UserCount:
                type:        Int!
                description: 'Retrieve the Users count.'
                access:      '@=hasRole("ROLE_ADMIN")'
                resolve:     '@=query("App\\GraphQl\\Query\\User\\UserCountQuery", args["filters"])'
                args:
                    filters: UserFilterInput

            User:
                type:        User
                description: 'Retrieve a single User.'
                access:      '@=hasRole("ROLE_ADMIN")'
                resolve:     '@=query("App\\GraphQl\\Query\\User\\UserQuery", args["userId"])'
                args:
                    userId: UserId!

            UserEmailUnique:
                type:        UserEmailUnique!
                description: 'Check if an email address is unique. Excludes the current user.'
                resolve:     '@=query("App\\GraphQl\\Query\\User\\UserEmailUniqueQuery", args["email"])'
                args:
                    email: String!

            UserPasswordValid:
                type:        UserPasswordValid!
                description: 'Check if the password is valid/correct for the current user.'
                access:      '@=isAuthenticated()'
                resolve:     '@=query("App\\GraphQl\\Query\\User\\UserPasswordValidQuery", args["password"])'
                args:
                    password: String!

            UserRecoverResetPasswordStrength:
                type:        UserPasswordAllowed!
                description: 'Check if users password meets the minimum strength requirements. Token must be stored in the session. This will return true if the token is not stored in the session or has already been used.'
                resolve:     '@=query("App\\GraphQl\\Query\\User\\UserRecoverResetPasswordStrengthQuery", args["newPassword"])'
                args:
                    newPassword: String!

UserFilterInput:
    type: input-object
    config:
        description: 'Available filters for querying Users. Any passed fields will be applied if not empty. Exclude the key/field to skip that filter.'
        fields:
            q:              String
            roles:          '[Role!]'
            email:          String
            emailExact:     String
            active:         Boolean
            accountStatus:  String
            offset:         Int

UserEmailUnique:
    type: object
    config:
        fields:
            unique: Boolean!

UserPasswordValid:
    type: object
    config:
        fields:
            valid: Boolean!

UserPasswordAllowed:
    type: object
    config:
        fields:
            allowed: Boolean!
