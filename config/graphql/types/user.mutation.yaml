UserMutation:
    decorator: true
    heirs: [ Mutation ]
    config:
        fields:
            UserUpdateProfile:
                type:        UserMutationPayload!
                description: 'Update User profile.'
                access:      '@=isAuthenticated()'
                resolve:     '@=mutation("App\\GraphQl\\Mutation\\User\\UserUpdateProfileMutation", args)'
                args:
                    user: UserUpdateProfileInput!

            UserLoginLink:
                type:        UserResultPayload!
                description: 'Send a magic login link to the user.'
                resolve:     '@=mutation("App\\GraphQl\\Mutation\\User\\UserLoginLinkMutation", args)'
                args:
                    email: String!

            ChangePassword:
                type:        UserMutationPayload!
                description: 'Change User password.'
                access:      '@=isAuthenticated()'
                resolve:     '@=mutation("App\\GraphQl\\Mutation\\User\\UserPasswordMutation", args)'
                args:
                    user: UserPasswordInput!

            UserRecoverInitiate:
                type:        UserResultPayload!
                description: 'Initiate User account recovery.'
                resolve:     '@=mutation("App\\GraphQl\\Mutation\\User\\UserRecoverInitiateMutation", args)'
                args:
                    email: String!

            UserRecoverReset:
                type:        UserResultPayload!
                description: 'Set User password. Token is stored in the session.'
                resolve:     '@=mutation("App\\GraphQl\\Mutation\\User\\UserRecoverResetMutation", args)'
                args:
                    newPassword: String!

            UserActivate:
                type:        UserResultPayload!
                description: 'Activate User account with password. Token is stored in the session.'
                resolve:     '@=mutation("App\\GraphQl\\Mutation\\User\\UserActivateMutation", args)'
                args:
                    password: String!

            UserVerify:
                type:        UserResultPayload!
                description: 'Verify User account. Token is stored in the session.'
                resolve:     '@=mutation("App\\GraphQl\\Mutation\\User\\UserVerifyMutation", args)'

            AdminUserAdd:
                type:        AdminUserAddMutationPayload!
                description: 'Admin User add.'
                access:      '@=hasRole("ROLE_ADMIN")'
                resolve:     '@=mutation("App\\GraphQl\\Mutation\\User\\AdminUserAddMutation", args)'
                args:
                    user: AdminUserAddInput!

            AdminUserUpdate:
                type:        AdminUserMutationPayload!
                description: 'Admin User update.'
                access:      '@=hasRole("ROLE_ADMIN")'
                resolve:     '@=mutation("App\\GraphQl\\Mutation\\User\\AdminUserUpdateMutation", args)'
                args:
                    user: AdminUserUpdateInput!

            AdminUserActivate:
                type:        AdminUserMutationPayload!
                description: 'Activate User by Admin.'
                access:      '@=hasRole("ROLE_ADMIN")'
                resolve:     '@=mutation("App\\GraphQl\\Mutation\\User\\AdminUserActivateMutation", args)'
                args:
                    user: AdminUserActivateInput!

            AdminUserVerify:
                type:        AdminUserMutationPayload!
                description: 'Verify User by Admin.'
                access:      '@=hasRole("ROLE_ADMIN")'
                resolve:     '@=mutation("App\\GraphQl\\Mutation\\User\\AdminUserVerifyMutation", args["userId"])'
                args:
                    userId: UUID!

            AdminUserSendReset:
                type:        AdminUserMutationPayload!
                description: 'Send User a password reset link.'
                access:      '@=hasRole("ROLE_ADMIN")'
                resolve:     '@=mutation("App\\GraphQl\\Mutation\\User\\AdminUserSendResetToUserMutation", args["userId"])'
                args:
                    userId: UUID!

            AdminUserSendActivation:
                type:        AdminUserMutationPayload!
                description: 'Send User a their activation link.'
                access:      '@=hasRole("ROLE_ADMIN")'
                resolve:     '@=mutation("App\\GraphQl\\Mutation\\User\\AdminUserSendActivationToUserMutation", args["userId"])'
                args:
                    userId: UUID!

            AdminUserSendLoginLink:
                type:        AdminUserLoginLinkMutationPayload!
                description: 'Send a magic login link to a user.'
                resolve:     '@=mutation("App\\GraphQl\\Mutation\\User\\AdminUserSendLoginLinkMutation", args["userId"])'
                args:
                    userId: UUID!

            AdminUserDelete:
                type:        UserDeleteMutationPayload!
                description: 'Delete User.'
                access:      '@=hasRole("ROLE_ADMIN")'
                resolve:     '@=mutation("App\\GraphQl\\Mutation\\User\\AdminUserDeleteMutation", args["userId"])'
                args:
                    userId: UUID!

UserUpdateProfileInput:
    type: input-object
    config:
        description: 'User profile update mutation input.'
        fields:
            email:     String!
            firstName: String!
            lastName:  String!
            userData:  UserDataInput!

UserDataInput:
    type: input-object
    config:
        description: 'User data input.'
        fields:
            phoneNumber: String

UserPasswordInput:
    type: input-object
    config:
        description: 'User update mutation input.'
        fields:
            currentPassword: String!
            newPassword:     String!

AdminUserInput:
    type: input-object
    config:
        description: 'Admin User add mutation input.'
        fields:
            userId:    UUID!
            email:     String!
            password:  String
            firstName: String!
            lastName:  String!
            userData:  UserDataInput!

AdminUserAddInput:
    type: input-object
    inherits: [ AdminUserInput ]
    config:
        description: 'Admin User add mutation input.'
        fields:
            setPassword: Boolean!
            role:        Role!
            active:      Boolean!
            sendInvite:  Boolean!

AdminUserUpdateInput:
    type: input-object
    inherits: [ AdminUserInput ]
    config:
        description: 'Admin User update mutation input.'
        fields:
            setPassword: Boolean!
            role:        Role!

AdminUserActivateInput:
    type: input-object
    config:
        description: 'Admin User activate/deactivate mutation input.'
        fields:
            userId: UUID!
            action: String!

UserMutationPayload:
    type: object
    config:
        description: 'User mutation payload.'
        fields:
            success: Boolean!

UserResultPayload:
    type: object
    config:
        description: 'Payload if the User mutation was successful.'
        fields:
            success: Boolean!

AdminUserMutationPayload:
    type: object
    config:
        description: 'Admin User mutation payload.'
        fields:
            userId: UUID!

AdminUserAddMutationPayload:
    type: object
    inherits: [ AdminUserMutationPayload ]
    config:
        description: 'Admin User add mutation payload.'
        fields:
            email:  String!
            active: Boolean!

AdminUserLoginLinkMutationPayload:
    type: object
    config:
        description: 'User login link mutation payload.'
        fields:
            success: Boolean!
            user:    User

UserDeleteMutationPayload:
    type: object
    config:
        description: 'User delete mutation payload.'
        fields:
            success: Boolean!
