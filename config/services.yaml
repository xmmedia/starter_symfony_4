# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    # hard to find docs on this, but this is the closest I could find:
    # https://twitter.com/nicolasgrekas/status/929032213815005184
    container.dumper.inline_class_loader: true
    locale: 'en'
    router.request_context.host: '%env(REQUEST_CONTEXT_HOST)%'
    router.request_context.scheme: '%env(REQUEST_CONTEXT_SCHEME)%'
    # @todo-symfony
    user_timezone: 'America/Edmonton'
    email.product_name: 'XM Symfony Starter'
    email.company_name: 'XM Media Inc.'
    email.company_address: '123 Street, Big City'
    email.whitelist: ['/@xmmedia\.com$/']
    # email templates
    email.template.auth.user_invite: 'auth-user_invite'
    email.template.auth.password_reset: 'auth-password_reset'
    email.template.enquiry_received: 'enquiry-received'
    # this is to fix the error in while configuring the graphql bundle
    # https://github.com/overblog/GraphQLBundle/issues/588
    container.build_id: 'a fake build id'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

        bind:
            $commandBus: '@messenger.bus.commands'
            $eventBus: '@messenger.bus.events'
            string $adminEmail: '%env(FROM_EMAIL)%'

    _instanceof:
        GraphQL\Type\Definition\Type:
            tags: ['overblog_graphql.type']
        Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface:
            tags: ['overblog_graphql.resolver']
        Overblog\GraphQLBundle\Definition\Resolver\MutationInterface:
            tags: ['overblog_graphql.mutation']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,EventSourcing/Aggregate,Infrastructure/Repository,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\ProcessManager\:
        resource: '../src/ProcessManager/*ProcessManager.php'
        tags:
            - { name: 'messenger.message_handler', bus: 'messenger.bus.events' }

    App\Model\:
        resource: '../src/Model/*/Handler/*Handler.php'
        tags:
            - { name: 'messenger.message_handler', bus: 'messenger.bus.commands' }

    App\Model\User\Handler\SendActivationHandler:
        arguments:
            $template: '%email.template.auth.user_invite%'
        tags:
            - { name: 'messenger.message_handler', bus: 'messenger.bus.commands' }
    App\Model\User\Handler\InitiatePasswordRecoveryHandler:
        arguments:
            $template: '%email.template.auth.password_reset%'
        tags:
            - { name: 'messenger.message_handler', bus: 'messenger.bus.commands' }
    App\Model\Enquiry\Handler\SendEnquiryEmailHandler:
        arguments:
            $template: '%email.template.enquiry_received%'
        tags:
            - { name: 'messenger.message_handler', bus: 'messenger.bus.commands' }

    App\Controller\DefaultController:
        arguments:
            $defaultTemplate: '%cmf_content.default_template%'

    App\Model\User\Service\ChecksUniqueUsersEmail: '@App\Infrastructure\Service\ChecksUniqueUsersEmailFromReadModel'

    App\Infrastructure\Cmf\HomepageUrlGuesser:
        tags:
            - { name: 'cmf_seo.sitemap.guesser', priority: 10 }

    App\EventSubscriber\CreatedUpdatedBySubscriber:
        tags:
            - { name: 'doctrine_phpcr.event_subscriber' }

    Xm\SymfonyBundle\EventStore\EventStoreMessengerPlugin:
        tags: [ 'prooph_event_store.plugin' ]

    Xm\SymfonyBundle\Infrastructure\Email\EmailGateway:
        arguments:
            $postmarkApiKey: '%env(POSTMARK_API_KEY)%'
            $emailFrom: '%env(FROM_EMAIL)%'
            $emailFromName: '%env(FROM_EMAIL_NAME)%'
            $kernelEnv: '%kernel.environment%'
            $productName: '%email.product_name%'
            $companyName: '%email.company_name%'
            $companyAddress: '%email.company_address%'
            $whitelist: '%email.whitelist%'
            $devEmail: '%env(DEV_EMAIL)%'
    Xm\SymfonyBundle\Infrastructure\Email\EmailGatewayInterface: '@Xm\SymfonyBundle\Infrastructure\Email\EmailGateway'

    Xm\SymfonyBundle\Infrastructure\Service\ProjectionRunner:
        arguments:
            $projectionsManager: '@prooph_event_store.projection_manager.app'
            $projectionManagerForProjectionsLocator: '@prooph_event_store.projection_manager_for_projections_locator'
            $projectionsLocator: '@prooph_event_store.projections_locator'
            $projectionReadModelLocator: '@prooph_event_store.projection_read_models_locator'

    # @todo-symfony delete if not using
    Xm\SymfonyBundle\Infrastructure\Service\Cloudflare:
        arguments:
            $cloudflareZone: '%env(CLOUDFLARE_ZONE)%'
            $cloudflareUsername: '%env(CLOUDFLARE_USERNAME)%'
            $cloudflareApiKey: '%env(CLOUDFLARE_API_KEY)%'
