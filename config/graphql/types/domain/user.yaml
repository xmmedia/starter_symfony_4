User:
    type: object
    config:
        description: 'The User object.'
        fields:
            userId:    UserId!
            email:     String!
            firstName: String
            lastName:  String
            name:      String
            verified:
                type:   Boolean!
                access: '@=hasRole("ROLE_ADMIN")'
            active:
                type:   Boolean!
                access: '@=hasRole("ROLE_ADMIN")'
            roles:
                type:    '[Role!]'
                access:  '@=isAuthenticated()'
                resolve: '@=query("App\\GraphQl\\Query\\User\\UserRoleQuery", value)'
            # if they attempt to access this field when not admin
            # they'll get an access denied + null for the whole user
            # as this field cannot come back as null
            loginCount:
                type:   Int!
                access: '@=hasRole("ROLE_ADMIN")'
            lastLogin:
                type:   DateTime
                access: '@=hasRole("ROLE_ADMIN")'
            userData:  UserData

UserData:
    type: object
    config:
        description: 'Additional data regarding user.'
        fields:
            phoneNumber: PhoneNumber
